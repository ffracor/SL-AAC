}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
View(tabella_pred)
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
# print(pois_mdl$coefficients)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
return(pois_mdl$coefficients)
}
n = 1000
# Use boot() function to perform bootstrap simulations
coefficients_sw_poiss <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric(ncol(x))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
isSignificativo_poiss<- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
View(tabella_pred)
stepwise_significativi_poiss <- names(isSignificativo_poiss[isSignificativo_poiss == 1])
col_name <- c("(Intercept)",colnames(x))
medie_coeff_poiss <- setNames(numeric(length(col_name)), col_name)
colnames(x)
coefficients_sw_poiss[["t"]]
names(coefficients_sw_poiss[["t"]])
coefficients_sw_poiss$data
colnames(coefficients_sw_poiss$data))
colnames(coefficients_sw_poiss$data)
coefficients_sw_poiss[["t0"]]
names(coefficients_sw_poiss[["t0"]])
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric(ncol(x))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
col_name <- colnames(coefficients_sw_poiss[["t0"]])
col_name <- colnames(coefficients_sw_poiss[["t0"]])
colnames(coefficients_sw_poiss[["t0"]])
col_name <- names(coefficients_sw_poiss[["t0"]])
medie_coeff_poiss <- setNames(numeric(length(col_name)), col_name)
isSignificativo_poiss<- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
stepwise_significativi_poiss <- names(isSignificativo_poiss[isSignificativo_poiss == 1])
View(tabella_pred)
coefficients_sw_poiss[["t0"]]
?boot
stepwise_significativi_poiss <- names(isSignificativo_poiss[isSignificativo_poiss == 1])
stepwise_significativi_poiss <- stepwise_significativi_poiss[-1]
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
names(isSignificativo_poiss[isSignificativo_poiss == 1])
isSignificativo_poiss[isSignificativo_poiss == 1]
# Converte la matrice o il data frame in un vettore
isSignificativo_poiss_vector <- as.vector(isSignificativo_poiss)
# Salva i nomi degli elementi con valore uguale a 1 in un vettore
stepwise_significativi_poiss <- names(which(isSignificativo_poiss_vector == 1))
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
isSignificativo_poiss<- setNames(numeric(length(col_name)), col_name)
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
stepwise_significativi_poiss <- names(isSignificativo_poiss[isSignificativo_poiss == 1])
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
stepwise_significativi_poiss
train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = FALSE)
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
plot(rand_model, main="Random forest model")
rand_fit <- predict(rand_model, newdata = x[-train,])
plot(rand_fit, x$Sleep.efficiency[-train])
library(tidyverse)
library(caret)
library(leaps)
library("MASS")
library("glmnet")
library ( ISLR2 )
library ( boot )
library(tree)
library ( randomForest )
library ( gbm )
library(recipes)
library("tseries")
library(tseries)
library(xtable)
library(groupdata2)
library(tseries)
library(corrplot)
library(gridExtra)
library(ggplot2)
# clear all environment variable
rm(list = ls())
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
corr_matrix <- cor(x)
# saving number of original columns
dim = ncol(x)
n = 2000
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = FALSE)
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
plot(rand_model, main="Random forest model")
rand_fit <- predict(rand_model, newdata = x[-train,])
plot(rand_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_rand = mean((x$Sleep.efficiency[-train] - rand_fit)^2)
MSE_rand
get_predictors_IC <- function(data, index)
{
temp_train <- sample(nrow(data), floor(nrow(data)), replace = TRUE)
temp_rand_model <- randomForest(Sleep.efficiency ~ . ,data = data[temp_train,],
mtry = (ncol(x)-1), importance = TRUE, replace = TRUE, ntree = 200)
temp_fit <- predict(temp_rand_model, newdata = x[-train])
return(temp_fit)
}
res_predizioni <- boot(x[train,], get_predictors_IC, R=n)
train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = FALSE)
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
plot(rand_model, main="Random forest model")
rand_fit <- predict(rand_model, newdata = x[-train,])
plot(rand_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_rand = mean((x$Sleep.efficiency[-train] - rand_fit)^2)
MSE_rand
get_predictors_IC <- function(data, index)
{
temp_train <- sample(nrow(data), floor(nrow(data)), replace = TRUE)
temp_rand_model <- randomForest(Sleep.efficiency ~ . ,data = data[temp_train,],
mtry = (ncol(x)-1), importance = TRUE, replace = TRUE, ntree = 200)
temp_fit <- predict(temp_rand_model, newdata = x[-train])
return(temp_fit)
}
res_predizioni <- boot(x[train,], get_predictors_IC, R=n)
View(get_predictors_IC)
library(tidyverse)
library(caret)
library(leaps)
library("MASS")
library("glmnet")
library ( ISLR2 )
library ( boot )
library(tree)
library ( randomForest )
library ( gbm )
library(recipes)
library("tseries")
library(tseries)
library(xtable)
library(groupdata2)
library(tseries)
library(corrplot)
library(gridExtra)
library(ggplot2)
# clear all environment variable
rm(list = ls())
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
# saving number of original columns
dim = ncol(x)
n = 2000
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
calcoloR_2 <- function(y, y_hat){
D_tot = sum((y - mean(y))^2)
D_res = sum((y - y_hat)^2)
return( 1- D_res/D_tot)
}
# STEPWISE
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_SW <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_SW <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
mdl <- lm(Sleep.efficiency ~ . , data = x[temp_train,])
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step.model$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_SW[i]) %in% coeff_stimati){
contatore_vect_SW[i] <<- contatore_vect_SW[i] + 1
}
}
}
# Define bootstrap function
get_alpha <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x, subset = temp_train)
temp_fitt_value <- predict(temp_mdl, data[-temp_train,])
temp_test_MSE = mean((data$Sleep.efficiency[-temp_train] - temp_fitt_value)^2)
return (c(temp_test_MSE, temp_mdl$coefficients))
}
#creazione vettore per intervalli di confidenza
IC_up_SW <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC_down_SW <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
isSignificativo <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
#BAGGING
bagg_model <- randomForest(Sleep.efficiency ~ . ,data = x, subset = train, mtry = ncol(x)-1, importance = TRUE, replace = TRUE, ntree = 200)
plot(bagg_model, main="Bagging model")
bagg_fit <- predict(bagg_model, newdata = x[-train,])
plot(bagg_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_bagg = mean((x$Sleep.efficiency[-train] - bagg_fit)^2)
MSE_bagg
train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = FALSE)
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
plot(rand_model, main="Random forest model")
rand_fit <- predict(rand_model, newdata = x[-train,])
plot(rand_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_rand = mean((x$Sleep.efficiency[-train] - rand_fit)^2)
MSE_rand
get_predictors_IC <- function(data, index)
{
temp_train <- sample(nrow(data), floor(nrow(data)), replace = TRUE)
temp_rand_model <- randomForest(Sleep.efficiency ~ . ,data = data[temp_train,],
mtry = (ncol(x)-1), importance = TRUE, replace = TRUE, ntree = 200)
temp_fit <- predict(temp_rand_model, newdata = x[-train])
return(temp_fit)
}
res_predizioni <- boot(x[train,], get_predictors_IC, R=n)
View(x)
# clear all environment variable
rm(list = ls())
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
# saving number of original columns
dim = ncol(x)
n = 2000
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = 5, importance = TRUE, replace = TRUE, ntree = 200)
plot(rand_model, main="Random forest model")
rand_fit <- predict(rand_model, newdata = x[-train,])
plot(rand_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_rand = mean((x$Sleep.efficiency[-train] - rand_fit)^2)
MSE_rand
sqrt(MSE_rand)
#calcolo dell'R^2
D_tot = sum((x$Sleep.efficiency[-train] - mean(x$Sleep.efficiency[-train]))^2)
D_res = sum((x$Sleep.efficiency[-train] - rand_fit)^2)
r_2 = 1- D_res/D_tot
r_2
get_alpha_tree <- function(data,index){
temp_train <- sample(train, length(train), replace = TRUE)
temp_features <- sample(10, 5, replace = FALSE)
temp_features[temp_features==4] <- 11
temp_tree_model <- tree(data$Sleep.efficiency ~ . , data= data[,temp_features], subset= temp_train, split = 'gini')
temp_fitt_value <- predict(temp_tree_model, newdata = data[-train, temp_features])
#temp_test_MSE = mean((data$Sleep.efficiency[-train] - temp_fitt_value)^2)
return (temp_fitt_value)
}
res_predizioni_3 <- boot(x,get_alpha_tree,R=2000) #attenzione 'x' minuscola in questo caso
res_predizioni_3[["t"]]
hist(res[["t"]][,1])
medie_pre_3 <- numeric(length(IC_up_predictions_3))
y_test_3 <- x[-train,4]
isDentro_3 <- numeric(ncol(res_predizioni_3[["t"]]))
for (k in 1:ncol(res_predizioni_3[["t"]])){
IC_up_predictions_3[k] <- quantile(res_predizioni_3[["t"]][,k], 0.975)
IC_down_predictions_3[k] <- quantile(res_predizioni_3[["t"]][,k], 0.025)
medie_pre_3[k] = mean(res_predizioni_3[["t"]][,k])
isDentro_3[k] <- ifelse(y_test_3[k] >= IC_down_predictions_3[k] && y_test_3[k] <= IC_up_predictions_3[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred_3 <- data.frame(rand_fit,  IC_down_predictions_3, y_test_3, IC_up_predictions_3,isDentro_3)
IC_up_predictions_3 <- numeric(nrow(x[-train,]))
IC_down_predictions_3 <- numeric(nrow(x[-train,]))
medie_pre_3 <- numeric(length(IC_up_predictions_3))
y_test_3 <- x[-train,4]
isDentro_3 <- numeric(ncol(res_predizioni_3[["t"]]))
for (k in 1:ncol(res_predizioni_3[["t"]])){
IC_up_predictions_3[k] <- quantile(res_predizioni_3[["t"]][,k], 0.975)
IC_down_predictions_3[k] <- quantile(res_predizioni_3[["t"]][,k], 0.025)
medie_pre_3[k] = mean(res_predizioni_3[["t"]][,k])
isDentro_3[k] <- ifelse(y_test_3[k] >= IC_down_predictions_3[k] && y_test_3[k] <= IC_up_predictions_3[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred_3 <- data.frame(rand_fit,  IC_down_predictions_3, y_test_3, IC_up_predictions_3,isDentro_3)
sum(isDentro_3)
#plot dei grafici
# Creazione del grafico a linea
plot(IC_down_predictions_3, type="l", col="red", ylim=c(min(IC_down_predictions_3, y_test_3, IC_up_predictions_3), max(IC_down_predictions_3, y_test_3, IC_up_predictions_3)), xlab="Numero di osservazioni", ylab="Valore", main="Grafico a linea")
# Aggiunta delle linee per i vettori y_test_3 e IC_up_predictions_3
lines(y_test_3, col="blue")
# Aggiunta della legenda
legend("topright", legend=c("IC_down_predictions_3", "y_test_3", "IC_up_predictions_3"), col=c("red", "blue", "green"), lty=c(1,1,1))
#plot dei grafici
# Creazione del grafico a linea
plot(IC_down_predictions_3, type="l", col="red", ylim=c(min(IC_down_predictions_3, y_test_3, IC_up_predictions_3), max(IC_down_predictions_3, y_test_3, IC_up_predictions_3)), xlab="Numero di osservazioni", ylab="Valore", main="Grafico a linea")
# Aggiunta delle linee per i vettori y_test_3 e IC_up_predictions_3
lines(y_test_3, col="blue")
lines(IC_up_predictions_3, col="green")
# Aggiunta della legenda
legend("topright", legend=c("IC_down_predictions_3", "y_test_3", "IC_up_predictions_3"), col=c("red", "blue", "green"), lty=c(1,1,1))
#plot dei grafici
# Creazione del grafico a linea con i primi 30 elementi dei tre vettori
plot(IC_down_predictions_3[1:30], type="l", col="red", ylim=c(min(IC_down_predictions_3, y_test_3, IC_up_predictions_3), max(IC_down_predictions_3, y_test_3, IC_up_predictions_3)), xlab="Numero di osservazioni", ylab="Valore", main="Grafico a linea")
# Aggiunta delle linee per i primi 30 elementi dei vettori y_test_3 e IC_up_predictions_3
lines(y_test_3[1:30], col="blue")
lines(IC_up_predictions_3[1:30], col="green")
library(tidyverse)
library(caret)
library(leaps)
library("MASS")
library("glmnet")
library ( ISLR2 )
library ( boot )
library(tree)
library ( randomForest )
library ( gbm )
library(recipes)
library("tseries")
library(tseries)
library(xtable)
library(groupdata2)
library(tseries)
library(corrplot)
library(gridExtra)
library(ggplot2)
# clear all environment variable
rm(list = ls())
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
corr_matrix <- cor(x)
corrplot(corr_matrix, type="upper", order="hclust")
par(mfrow = c(2,3))
p2<-barplot(table(x$Gender), main="" , xlab = "Gender", ylab= "Frequency")
p3<-barplot(table(x$Sleep.duration), main="" , xlab = "Sleep Duration [h]", ylab= "Frequency")
p8 <- barplot(table(x$Caffeine.consumption), main="" , xlab = expression(paste("Caffeine Consumption [", mu, "g/day]")), ylab= "Frequency")
p9<-barplot(table(x$Alcohol.consumption), main="" , xlab = expression(paste("Alcohol Consumption [oz/day]")), ylab= "Frequency")
p10<-barplot(table(x$Smoking.status), main="" , xlab = "Smoking Status", ylab= "Frequency")
p11<-barplot(table(x$Exercise.frequency), main="" , xlab = "Exercise Frequency", ylab= "Frequency")
par(mfrow = c(1,3))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
p5<-hist(x$REM.sleep.percentage, main="" , xlab = "REM Sleep Percentage [%]", ylab= "Frequency")
p6<-hist(x$Deep.sleep.percentage, main="" , xlab = "Deep Sleep Percentage [%]", ylab= "Frequency")
par(mfrow = c(1,2))
p7<-barplot(table(x$Awakenings), main="" , xlab = "Awakenings", ylab= "Frequency")
p4<-hist(x$Sleep.efficiency, main="" , xlab = "Sleep Efficiency", ylab= "Frequency")
# saving number of original columns
dim = ncol(x)
n = 2000
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
calcoloR_2 <- function(y, y_hat){
D_tot = sum((y - mean(y))^2)
D_res = sum((y - y_hat)^2)
return( 1- D_res/D_tot)
}
# STEPWISE
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_SW <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_SW <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
mdl <- lm(Sleep.efficiency ~ . , data = x[temp_train,])
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step.model$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_SW[i]) %in% coeff_stimati){
contatore_vect_SW[i] <<- contatore_vect_SW[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_SW,R = n, parallel = "multicore")
stepwise_significativi <- names(contatore_vect_SW[contatore_vect_SW > n/2])
stepwise_significativi <- stepwise_significativi[-1]
stepwise_final_model <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x)
summary(stepwise_final_model)
# Define bootstrap function
get_alpha <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x, subset = temp_train)
temp_fitt_value <- predict(temp_mdl, data[-temp_train,])
temp_test_MSE = mean((data$Sleep.efficiency[-temp_train] - temp_fitt_value)^2)
return (c(temp_test_MSE, temp_mdl$coefficients))
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_SW,R = n, parallel = "multicore")
stepwise_significativi <- names(contatore_vect_SW[contatore_vect_SW > n/2])
stepwise_significativi <- stepwise_significativi[-1]
stepwise_final_model <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x)
summary(stepwise_final_model)
# Define bootstrap function
get_alpha <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x, subset = temp_train)
temp_fitt_value <- predict(temp_mdl, data[-temp_train,])
temp_test_MSE = mean((data$Sleep.efficiency[-temp_train] - temp_fitt_value)^2)
return (c(temp_test_MSE, temp_mdl$coefficients))
}
# Use boot() function to perform bootstrap simulations
res <- boot(x,get_alpha,R=n)
Coefficients_stepwise_final <- res[["t"]][,2]
MSE_stepwise_final <- res[["t"]][,1]
mean(MSE_stepwise_final)
hist(MSE_stepwise_final, main="Stepwise MSE", sub="")
#creazione vettore per intervalli di confidenza
IC_up_SW <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC_down_SW <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
isSignificativo <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
for (k in 1:ncol(res[["t"]])){
IC_up_SW[k] <- quantile(res[["t"]][,k], 0.975)
IC_down_SW[k] <- quantile(res[["t"]][,k], 0.025)
isSignificativo[k] <- ifelse(IC_up_SW[k]*IC_down_SW[k]<=0,0,1)
}
media_beta <- numeric(length(stepwise_significativi)+1)
for (k in 2:ncol(res[["t"]])){
media_beta[k-1] <- mean(res[["t"]][,k])
}
tabella_stepwise <- data.frame(media_beta, IC_down_SW[-1], IC_up_SW[-1], isSignificativo[-1], contatore_vect_SW[contatore_vect_SW > n/2]/n)
print_tab <- xtable(tabella_stepwise, digits=2)
print(print_tab)
print_tab <- xtable(tabella_stepwise, digits=c(4,5,4,4,3))
print(print_tab)
print_tab <- xtable(tabella_stepwise, digits=c(4,5,4,4,3 ,2))
print(print_tab)
print.xtable(print_tab, digits = list(matrix(c(5, 2, 2, 4, 3, 0), nrow=3)))
print_tab <- xtable(tabella_stepwise)
print.xtable(print_tab, digits = list(matrix(c(5, 2, 2, 4, 3, 0), nrow=3)))
