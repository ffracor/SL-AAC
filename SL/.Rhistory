get_alpha <- function(data,index){
temp_train <- sample(index,nrow(data), replace = TRUE)
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=data, subset = temp_train)
temp_fitt_value <- predict(temp_mdl, x[-train,])
return (temp_fitt_value)
}
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x, subset = temp_train)
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
temp_train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = TRUE)
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x, subset = temp_train)
summary(temp_mdl)
hist(predict(temp_mdl)-y[temp_train])
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x, subset = temp_train)
install.packages("timeSeries")
library(timeSeries)
jarque.bera.test(predict(temp_mdl)-y[temp_train])
library(timeSeries)
install.packages("tseries")
library(tseries)
jarque.bera.test(predict(temp_mdl)-y[temp_train])
# clear all environment variable
rm(list = ls())
# import libraries
library(tidyverse)
library(caret)
library(leaps)
library("MASS")
library("glmnet")
library ( ISLR2 )
library ( boot )
library(tree)
library ( randomForest )
library ( gbm )
library(recipes)
library("tseries")
library(tseries)
library(xtable)
# saving number of original columns
dim = ncol(x)
n = 5000
n = 100
set.seed(42)
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
# saving number of original columns
dim = ncol(x)
n = 100
set.seed(42)
test_fix <- sample(nrow(x), floor(nrow(x) * 0.25), replace = TRUE)
x <- x[-test_fix,]
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(xeq))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
stepwise_significativi_poiss <- names(contatore_vect_POISS[contatore_vect_POISS > n/2])
stepwise_significativi_poiss <- stepwise_significativi_poiss[-1]
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=xeq, family = 'poisson')
pred <- predict(stepwise_final_model_poiss,type="response")
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
summary(stepwise_final_model_poiss)
pred <- predict(stepwise_final_model_poiss,type="response")
plot(x$Awakenings,pred)
install.packages("sm")
#sm.poissonù
library(sm)
poissmdl -> sm.poisson.bootstrap(x,y)
poissmdl -> sm.poisson.bootstrap(x,y)
poissmdl <- sm.poisson.bootstrap(x,y)
poissmdl <- sm.poisson.bootstrap(x = x, y = y)
View(x)
y <- as.factor(x$Awakenings)
poissmdl <- sm.poisson.bootstrap(x = x, y = y, h = 0.3)
poissmdl <- sm.poisson.bootstrap(x = x, y = y, h = 0.5)
#sm.poissonù
library(sm)
y <- as.factor(x$Awakenings)
poissmdl <- sm.poisson.bootstrap(x = x, y = y, h = 0.5)
View(x)
# import libraries
library(tidyverse)
library(caret)
library(leaps)
library("MASS")
library("glmnet")
library ( ISLR2 )
library ( boot )
library(tree)
library ( randomForest )
library ( gbm )
library(recipes)
library("tseries")
library(tseries)
library(xtable)
library(groupdata2)
library(tseries)
# clear all environment variable
rm(list = ls())
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
# saving number of original columns
dim = ncol(x)
n = 100
set.seed(42)
#BAGGING
bagg_model <- randomForest(Sleep.efficiency ~ . ,data = x, subset = train, mtry = ncol(x)-1, importance = TRUE, replace = TRUE, ntree = 200)
plot(bagg_model, main="Bagging model")
#BAGGING
bagg_model <- randomForest(Sleep.efficiency ~ . ,data = x, subset = train, mtry = ncol(x)-1, importance = TRUE, replace = TRUE, ntree = 200)
#BAGGING
bagg_model <- randomForest(Sleep.efficiency ~ . ,data = x, subset = train, mtry = ncol(x)-1, importance = TRUE, replace = TRUE, ntree = 200)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
#BAGGING
bagg_model <- randomForest(Sleep.efficiency ~ . ,data = x, subset = train, mtry = ncol(x)-1, importance = TRUE, replace = TRUE, ntree = 200)
plot(bagg_model, main="Bagging model")
bagg_fit <- predict(bagg_model, newdata = x[-train,])
plot(bagg_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_bagg = mean((x$Sleep.efficiency[-train] - bagg_fit)^2)
MSE_bagg
install.packages("rstatix")
library(rstatix)
install.packages("distributions3")
library(distributions3)
T <- StudentsT(df = 0)
View(`T`)
T <- StudentsT(df = 1)
T <- StudentsT(df = 0)
IC_down <- bagg_fit + quantile(T, alfa/2)
alfa <- 0.05
IC_down <- bagg_fit + quantile(T, alfa/2)*sd(bagg_fit)/sqrt(1)
bagg_fit <- predict(bagg_model, newdata = x[-train,], interval = "predict", level = "0.95")
plot(bagg_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_bagg = mean((x$Sleep.efficiency[-train] - bagg_fit)^2)
MSE_bagg
bagg_fit
mdl <- lm(Sleep.efficiency ~ . , data = x[train,])
predict(mdl,newdata = x[-train], interval = "predict", level = 0.95)
mdl <- lm(Sleep.efficiency ~ . , data = x[train,])
lm_fit <- predict(mdl,newdata = x[-train], interval = "predict", level = 0.95)
View(x)
# clear all environment variable
rm(list = ls())
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
# saving number of original columns
dim = ncol(x)
n = 100
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
mdl <- lm(Sleep.efficiency ~ . , data = x[train,])
lm_fit <- predict(mdl,newdata = x[-train], interval = "predict", level = 0.95)
View(x)
# clear all environment variable
rm(list = ls())
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
# saving number of original columns
dim = ncol(x)
n = 1000
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
plot(rand_model, main="Random forest model")
rand_fit <- predict(rand_model, newdata = x[-train,])
plot(rand_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_rand = mean((x$Sleep.efficiency[-train] - rand_fit)^2)
MSE_rand
get_predictors_IC <- function(data, index)
{
temp_train <- sample(nrow(data), floor(nrow(data)), replace = TRUE)
temp_rand_model <- randomForest(Sleep.efficiency ~ . ,data = data[temp_train,],
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
temp_fit <- predict(temp_rand_model, newdata = x[-train])
return(temp_fit)
}
res_predizioni <- boot(x[train,], get_predictors_IC, R=n)
View(x)
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
plot(rand_model, main="Random forest model")
rand_fit <- predict(rand_model, newdata = x[-train,])
plot(rand_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_rand = mean((x$Sleep.efficiency[-train] - rand_fit)^2)
MSE_rand
get_predictors_IC <- function(data, index)
{
temp_train <- sample(nrow(data), floor(nrow(data)), replace = TRUE)
temp_rand_model <- randomForest(Sleep.efficiency ~ . ,data = data, subset = temp_train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
temp_fit <- predict(temp_rand_model, newdata = x[-train])
return(temp_fit)
}
res_predizioni <- boot(x[train,], get_predictors_IC, R=n)
get_predictors_IC <- function(data, index)
{
temp_train <- sample(nrow(data), floor(nrow(data)), replace = TRUE)
temp_rand_model <- randomForest(Sleep.efficiency ~ . ,data = data, subset = temp_train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
temp_fit <- predict(temp_rand_model, newdata = x[-train,])
return(temp_fit)
}
res_predizioni <- boot(x[train,], get_predictors_IC, R=n)
IC_up_predictions <- numeric(nrow(x[-train,]))
IC_down_predictions <- numeric(nrow(x[-train,]))
medie_pre <- numeric(length(IC_up_predictions))
y_test <- x[-train,4]
isDentro <- numeric(ncol(res_predizioni[["t"]]))
for (k in 1:ncol(res_predizioni[["t"]])){
IC_up_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.995)
IC_down_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.005)
medie_pre[k] = mean(res_predizioni[["t"]][,k])
isDentro[k] <- ifelse(y_test[k] >= IC_down_predictions[k] && y_test[k] <= IC_up_predictions[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred <- data.frame(medie_pre,  IC_down_predictions, y_test, IC_up_predictions,isDentro)
View(tabella_pred)
sum(isDentro)
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.60),replace = FALSE);
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
plot(rand_model, main="Random forest model")
rand_fit <- predict(rand_model, newdata = x[-train,])
plot(rand_fit, x$Sleep.efficiency[-train])
abline(0,1)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.90),replace = FALSE);
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
plot(rand_model, main="Random forest model")
rand_fit <- predict(rand_model, newdata = x[-train,])
plot(rand_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_rand = mean((x$Sleep.efficiency[-train] - rand_fit)^2)
MSE_rand
get_predictors_IC <- function(data, index)
{
temp_train <- sample(nrow(data), floor(nrow(data)), replace = TRUE)
temp_rand_model <- randomForest(Sleep.efficiency ~ . ,data = data, subset = temp_train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
temp_fit <- predict(temp_rand_model, newdata = x[-train,])
return(temp_fit)
}
res_predizioni <- boot(x[train,], get_predictors_IC, R=n)
IC_up_predictions <- numeric(nrow(x[-train,]))
IC_down_predictions <- numeric(nrow(x[-train,]))
medie_pre <- numeric(length(IC_up_predictions))
y_test <- x[-train,4]
isDentro <- numeric(ncol(res_predizioni[["t"]]))
for (k in 1:ncol(res_predizioni[["t"]])){
IC_up_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.995)
IC_down_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.005)
medie_pre[k] = mean(res_predizioni[["t"]][,k])
isDentro[k] <- ifelse(y_test[k] >= IC_down_predictions[k] && y_test[k] <= IC_up_predictions[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred <- data.frame(medie_pre,  IC_down_predictions, y_test, IC_up_predictions,isDentro)
sum(isDentro)
for (k in 1:ncol(res_predizioni[["t"]])){
IC_up_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.975)
IC_down_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.025)
medie_pre[k] = mean(res_predizioni[["t"]][,k])
isDentro[k] <- ifelse(y_test[k] >= IC_down_predictions[k] && y_test[k] <= IC_up_predictions[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred <- data.frame(medie_pre,  IC_down_predictions, y_test, IC_up_predictions,isDentro)
sum(isDentro)
sum(isDentro)
IC_up_predictions <- numeric(nrow(x[-train,]))
IC_down_predictions <- numeric(nrow(x[-train,]))
medie_pre <- numeric(length(IC_up_predictions))
y_test <- x[-train,4]
isDentro <- numeric(ncol(res_predizioni[["t"]]))
for (k in 1:ncol(res_predizioni[["t"]])){
IC_up_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.995)
IC_down_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.005)
medie_pre[k] = mean(res_predizioni[["t"]][,k])
isDentro[k] <- ifelse(y_test[k] >= IC_down_predictions[k] && y_test[k] <= IC_up_predictions[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred <- data.frame(medie_pre,  IC_down_predictions, y_test, IC_up_predictions,isDentro)
sum(isDentro)
IC_up_predictions <- numeric(nrow(x[-train,]))
IC_down_predictions <- numeric(nrow(x[-train,]))
medie_pre <- numeric(length(IC_up_predictions))
y_test <- x[-train,4]
isDentro <- numeric(ncol(res_predizioni[["t"]]))
for (k in 1:ncol(res_predizioni[["t"]])){
IC_up_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.975)
IC_down_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.025)
medie_pre[k] = mean(res_predizioni[["t"]][,k])
isDentro[k] <- ifelse(y_test[k] >= IC_down_predictions[k] && y_test[k] <= IC_up_predictions[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred <- data.frame(medie_pre,  IC_down_predictions, y_test, IC_up_predictions,isDentro)
sum(isDentro)
sqrt(0.024)
sqrt(0.0024)
View(tabella_pred)
IC_up_predictions <- numeric(nrow(x[-train,]))
IC_down_predictions <- numeric(nrow(x[-train,]))
medie_pre <- numeric(length(IC_up_predictions))
y_test <- x[-train,4]
isDentro <- numeric(ncol(res_predizioni[["t"]]))
for (k in 1:ncol(res_predizioni[["t"]])){
IC_up_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.975)
IC_down_predictions[k] <- quantile(res_predizioni[["t"]][,k], 0.025)
medie_pre[k] = mean(res_predizioni[["t"]][,k])
isDentro[k] <- ifelse(y_test[k] >= IC_down_predictions[k] && y_test[k] <= IC_up_predictions[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred <- data.frame(medie_pre,  IC_down_predictions, y_test, IC_up_predictions,isDentro)
View(tabella_pred)
View(tabella_pred)
ercentile(0.95)
pnormGC(0.975, region = 'below', mean = 0, std = 1, graph = TRUE)
#pnormGC(0.975, region = 'below', mean = 0, std = 1, graph = TRUE)
qnorm(0.975, mean= 0, std  = 1)
#pnormGC(0.975, region = 'below', mean = 0, std = 1, graph = TRUE)
qnorm(0.975, mean= 0, std=1)
#pnormGC(0.975, region = 'below', mean = 0, std = 1, graph = TRUE)
qnorm(0.975, mean=0, sd=1)
res_predizioni[["t"]]
#pnormGC(0.975, region = 'below', mean = 0, std = 1, graph = TRUE)
z = qnorm(0.975, mean=0, sd=1)
for (k in 1:length(rand_fit)){
IC_up_predictions_2[k] <- rand_fit[k] + z*sqrt(MSE_rand)
IC_down_predictions_2[k] <- rand_fit[k] - z*sqrt(MSE_rand)
isDentro_2[k] <- ifelse(y_test[k] >= IC_down_predictions_2[k] && y_test[k] <= IC_up_predictions_2[k], 1, 0)
}
#pnormGC(0.975, region = 'below', mean = 0, std = 1, graph = TRUE)
z = qnorm(0.975, mean=0, sd=1)
IC_up_predictions_2 <- numeric(nrow(x[-train,]))
IC_down_predictions_2 <- numeric(nrow(x[-train,]))
isDentro_2 <- numeric(length(rand_fit))
for (k in 1:length(rand_fit)){
IC_up_predictions_2[k] <- rand_fit[k] + z*sqrt(MSE_rand)
IC_down_predictions_2[k] <- rand_fit[k] - z*sqrt(MSE_rand)
isDentro_2[k] <- ifelse(y_test[k] >= IC_down_predictions_2[k] && y_test[k] <= IC_up_predictions_2[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred <- data.frame(medie_pre,  IC_down_predictions, y_test, IC_up_predictions,isDentro)
#media del valore IC up IC down
tabella_pred_2 <- data.frame(rand_fit,  IC_down_predictions_2, y_test, IC_up_predictions_2,isDentro_2)
sum(isDentro_2)
37/40
27/39
37/39
hist(rand_fit - y_test)
View(tabella_pred_2)
View(tabella_pred_2)
IC_up_predictions_2 <- numeric(nrow(x[-train,]))
IC_down_predictions_2 <- numeric(nrow(x[-train,]))
isDentro_2 <- numeric(length(rand_fit))
for (k in 1:length(rand_fit)){
IC_up_predictions_2[k] <- rand_fit[k] + z*sqrt(var(y_test))
IC_down_predictions_2[k] <- rand_fit[k] - z*sqrt(var(y_test))
isDentro_2[k] <- ifelse(y_test[k] >= IC_down_predictions_2[k] && y_test[k] <= IC_up_predictions_2[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred <- data.frame(medie_pre,  IC_down_predictions, y_test, IC_up_predictions,isDentro)
#media del valore IC up IC down
tabella_pred_2 <- data.frame(rand_fit,  IC_down_predictions_2, y_test, IC_up_predictions_2,isDentro_2)
View(tabella_pred_2)
View(tabella_pred_2)
IC_up_predictions_2 <- numeric(nrow(x[-train,]))
IC_down_predictions_2 <- numeric(nrow(x[-train,]))
isDentro_2 <- numeric(length(rand_fit))
for (k in 1:length(rand_fit)){
IC_up_predictions_2[k] <- rand_fit[k] + z*sqrt(MSE_rand)
IC_down_predictions_2[k] <- rand_fit[k] - z*sqrt(MSE_rand)
isDentro_2[k] <- ifelse(y_test[k] >= IC_down_predictions_2[k] && y_test[k] <= IC_up_predictions_2[k], 1, 0)
}
View(tabella_pred_2)
View(tabella_pred_2)
sum(isDentro)
isDentro_2
sum(isDentro_2)
View(tabella_pred_2)
View(tabella_pred_2)
View(tabella_pred_2)
View(tabella_pred_2)
#media del valore IC up IC down
tabella_pred_2 <- data.frame(rand_fit,  IC_down_predictions_2, y_test, IC_up_predictions_2,isDentro_2)
#media del valore IC up IC down
tabella_pred_2 <- data.frame(rand_fit,  IC_down_predictions_2, y_test, IC_up_predictions_2,isDentro_2)
View(tabella_pred_2)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
# import libraries
library(tidyverse)
library(caret)
library(leaps)
library("MASS")
library("glmnet")
library ( ISLR2 )
library ( boot )
library(tree)
library ( randomForest )
library ( gbm )
library(recipes)
library("tseries")
library(tseries)
library(xtable)
library(groupdata2)
library(tseries)
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
rand_model <- randomForest(x$Sleep.efficiency ~ . ,data = x, subset = train,
mtry = floor(sqrt(ncol(x)-1)), importance = TRUE, replace = TRUE, ntree = 200)
rand_fit <- predict(rand_model, newdata = x[-train,])
MSE_rand = mean((x$Sleep.efficiency[-train] - rand_fit)^2)
#pnormGC(0.975, region = 'below', mean = 0, std = 1, graph = TRUE)
z = qnorm(0.975, mean=0, sd=1)
IC_up_predictions_2 <- numeric(nrow(x[-train,]))
IC_down_predictions_2 <- numeric(nrow(x[-train,]))
isDentro_2 <- numeric(length(rand_fit))
for (k in 1:length(rand_fit)){
IC_up_predictions_2[k] <- rand_fit[k] + z*sqrt(MSE_rand)
IC_down_predictions_2[k] <- rand_fit[k] - z*sqrt(MSE_rand)
isDentro_2[k] <- ifelse(y_test[k] >= IC_down_predictions_2[k] && y_test[k] <= IC_up_predictions_2[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred_2 <- data.frame(rand_fit,  IC_down_predictions_2, y_test, IC_up_predictions_2,isDentro_2)
y_test <- x[-train,4]
#pnormGC(0.975, region = 'below', mean = 0, std = 1, graph = TRUE)
z = qnorm(0.975, mean=0, sd=1)
IC_up_predictions_2 <- numeric(nrow(x[-train,]))
IC_down_predictions_2 <- numeric(nrow(x[-train,]))
isDentro_2 <- numeric(length(rand_fit))
for (k in 1:length(rand_fit)){
IC_up_predictions_2[k] <- rand_fit[k] + z*sqrt(MSE_rand)
IC_down_predictions_2[k] <- rand_fit[k] - z*sqrt(MSE_rand)
isDentro_2[k] <- ifelse(y_test[k] >= IC_down_predictions_2[k] && y_test[k] <= IC_up_predictions_2[k], 1, 0)
}
#media del valore IC up IC down
tabella_pred_2 <- data.frame(rand_fit,  IC_down_predictions_2, y_test, IC_up_predictions_2,isDentro_2)
View(tabella_pred_2)
hist(y_test - rad_fit)
hist(y_test - rand_fit)
