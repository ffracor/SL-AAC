var_dati[i] <- var(x[,i])
hist(x[,i], main=names(var_dati)[i], sub="")
}
corr_matrix <- cor(x)
corrplot(corr_matrix, type="upper", order="hclust")
par(mfrow = c(3,2))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
p2<-barplot(table(x$Gender), main="" , xlab = "Gender", ylab= "Frequency")
p3<-barplot(table(x$Sleep.duration), main="" , xlab = "Sleep Duration [h]", ylab= "Frequency")
p5<-hist(x$REM.sleep.percentage, main="" , xlab = "REM Sleep Percentage [%]", ylab= "Frequency")
p6<-hist(x$Deep.sleep.percentage, main="" , xlab = "Deep Sleep Percentage [%]", ylab= "Frequency")
p8 <- barplot(table(x$Caffeine.consumption), main="" , xlab = expression(paste("Caffeine Consumption [", mu, "g/day]")), ylab= "Frequency")
p9<-barplot(table(x$Alcohol.consumption), main="" , xlab = expression(paste("Alcohol Consumption [oz/day]")), ylab= "Frequency")
p10<-barplot(table(x$Smoking.status), main="" , xlab = "Smoking Status", ylab= "Frequency")
p11<-barplot(table(x$Exercise.frequency), main="" , xlab = "Exercise Frequency", ylab= "Frequency")
p4<-hist(x$Sleep.efficiency, main="" , xlab = "Sleep Efficiency", ylab= "Frequency")
p7<-barplot(table(x$Awakenings), main="" , xlab = "Awakenings", ylab= "Frequency")
# saving number of original columns
dim = ncol(x)
# clear all environment variable
rm(list = ls())
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
corr_matrix <- cor(x)
corrplot(corr_matrix, type="upper", order="hclust")
par(mfrow = c(3,2))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
p2<-barplot(table(x$Gender), main="" , xlab = "Gender", ylab= "Frequency")
p3<-barplot(table(x$Sleep.duration), main="" , xlab = "Sleep Duration [h]", ylab= "Frequency")
p5<-hist(x$REM.sleep.percentage, main="" , xlab = "REM Sleep Percentage [%]", ylab= "Frequency")
p6<-hist(x$Deep.sleep.percentage, main="" , xlab = "Deep Sleep Percentage [%]", ylab= "Frequency")
p8 <- barplot(table(x$Caffeine.consumption), main="" , xlab = expression(paste("Caffeine Consumption [", mu, "g/day]")), ylab= "Frequency")
p9<-barplot(table(x$Alcohol.consumption), main="" , xlab = expression(paste("Alcohol Consumption [oz/day]")), ylab= "Frequency")
p10<-barplot(table(x$Smoking.status), main="" , xlab = "Smoking Status", ylab= "Frequency")
p11<-barplot(table(x$Exercise.frequency), main="" , xlab = "Exercise Frequency", ylab= "Frequency")
par(mfrow = c(3,2))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
p2<-barplot(table(x$Gender), main="" , xlab = "Gender", ylab= "Frequency")
p3<-barplot(table(x$Sleep.duration), main="" , xlab = "Sleep Duration [h]", ylab= "Frequency")
p5<-hist(x$REM.sleep.percentage, main="" , xlab = "REM Sleep Percentage [%]", ylab= "Frequency")
p6<-hist(x$Deep.sleep.percentage, main="" , xlab = "Deep Sleep Percentage [%]", ylab= "Frequency")
p8 <- barplot(table(x$Caffeine.consumption), main="" , xlab = expression(paste("Caffeine Consumption [", mu, "g/day]")), ylab= "Frequency")
p9<-barplot(table(x$Alcohol.consumption), main="" , xlab = expression(paste("Alcohol Consumption [oz/day]")), ylab= "Frequency")
p10<-barplot(table(x$Smoking.status), main="" , xlab = "Smoking Status", ylab= "Frequency")
p11<-barplot(table(x$Exercise.frequency), main="" , xlab = "Exercise Frequency", ylab= "Frequency")
p4<-hist(x$Sleep.efficiency, main="" , xlab = "Sleep Efficiency", ylab= "Frequency")
corr_matrix <- cor(x)
corrplot(corr_matrix, type="upper", order="hclust")
par(mfrow = c(3,3))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
p2<-barplot(table(x$Gender), main="" , xlab = "Gender", ylab= "Frequency")
p3<-barplot(table(x$Sleep.duration), main="" , xlab = "Sleep Duration [h]", ylab= "Frequency")
p5<-hist(x$REM.sleep.percentage, main="" , xlab = "REM Sleep Percentage [%]", ylab= "Frequency")
p6<-hist(x$Deep.sleep.percentage, main="" , xlab = "Deep Sleep Percentage [%]", ylab= "Frequency")
par(mfrow = c(3,3))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
par(mfrow = c(3,2))
p2<-barplot(table(x$Gender), main="" , xlab = "Gender", ylab= "Frequency")
p3<-barplot(table(x$Sleep.duration), main="" , xlab = "Sleep Duration [h]", ylab= "Frequency")
p8 <- barplot(table(x$Caffeine.consumption), main="" , xlab = expression(paste("Caffeine Consumption [", mu, "g/day]")), ylab= "Frequency")
p9<-barplot(table(x$Alcohol.consumption), main="" , xlab = expression(paste("Alcohol Consumption [oz/day]")), ylab= "Frequency")
p10<-barplot(table(x$Smoking.status), main="" , xlab = "Smoking Status", ylab= "Frequency")
p11<-barplot(table(x$Exercise.frequency), main="" , xlab = "Exercise Frequency", ylab= "Frequency")
p7<-barplot(table(x$Awakenings), main="" , xlab = "Awakenings", ylab= "Frequency")
par(mfrow = c(2,3))
p2<-barplot(table(x$Gender), main="" , xlab = "Gender", ylab= "Frequency")
p3<-barplot(table(x$Sleep.duration), main="" , xlab = "Sleep Duration [h]", ylab= "Frequency")
p8 <- barplot(table(x$Caffeine.consumption), main="" , xlab = expression(paste("Caffeine Consumption [", mu, "g/day]")), ylab= "Frequency")
p9<-barplot(table(x$Alcohol.consumption), main="" , xlab = expression(paste("Alcohol Consumption [oz/day]")), ylab= "Frequency")
p10<-barplot(table(x$Smoking.status), main="" , xlab = "Smoking Status", ylab= "Frequency")
p11<-barplot(table(x$Exercise.frequency), main="" , xlab = "Exercise Frequency", ylab= "Frequency")
p7<-barplot(table(x$Awakenings), main="" , xlab = "Awakenings", ylab= "Frequency")
par(mfrow = c(2,2))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
p5<-hist(x$REM.sleep.percentage, main="" , xlab = "REM Sleep Percentage [%]", ylab= "Frequency")
p6<-hist(x$Deep.sleep.percentage, main="" , xlab = "Deep Sleep Percentage [%]", ylab= "Frequency")
p4<-hist(x$Sleep.efficiency, main="" , xlab = "Sleep Efficiency", ylab= "Frequency")
par(mfrow = c(2,3))
p2<-barplot(table(x$Gender), main="" , xlab = "Gender", ylab= "Frequency")
p3<-barplot(table(x$Sleep.duration), main="" , xlab = "Sleep Duration [h]", ylab= "Frequency")
p8 <- barplot(table(x$Caffeine.consumption), main="" , xlab = expression(paste("Caffeine Consumption [", mu, "g/day]")), ylab= "Frequency")
p9<-barplot(table(x$Alcohol.consumption), main="" , xlab = expression(paste("Alcohol Consumption [oz/day]")), ylab= "Frequency")
p10<-barplot(table(x$Smoking.status), main="" , xlab = "Smoking Status", ylab= "Frequency")
p11<-barplot(table(x$Exercise.frequency), main="" , xlab = "Exercise Frequency", ylab= "Frequency")
par(mfrow = c(2,2))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
p5<-hist(x$REM.sleep.percentage, main="" , xlab = "REM Sleep Percentage [%]", ylab= "Frequency")
p6<-hist(x$Deep.sleep.percentage, main="" , xlab = "Deep Sleep Percentage [%]", ylab= "Frequency")
par(mfrow = c(1,3))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
p5<-hist(x$REM.sleep.percentage, main="" , xlab = "REM Sleep Percentage [%]", ylab= "Frequency")
p6<-hist(x$Deep.sleep.percentage, main="" , xlab = "Deep Sleep Percentage [%]", ylab= "Frequency")
par(mfrow = c(2,3))
p2<-barplot(table(x$Gender), main="" , xlab = "Gender", ylab= "Frequency")
p3<-barplot(table(x$Sleep.duration), main="" , xlab = "Sleep Duration [h]", ylab= "Frequency")
p8 <- barplot(table(x$Caffeine.consumption), main="" , xlab = expression(paste("Caffeine Consumption [", mu, "g/day]")), ylab= "Frequency")
p9<-barplot(table(x$Alcohol.consumption), main="" , xlab = expression(paste("Alcohol Consumption [oz/day]")), ylab= "Frequency")
p10<-barplot(table(x$Smoking.status), main="" , xlab = "Smoking Status", ylab= "Frequency")
p11<-barplot(table(x$Exercise.frequency), main="" , xlab = "Exercise Frequency", ylab= "Frequency")
par(mfrow = c(1,3))
p1<-hist(x$Age, main="" , xlab = "Age [years]", ylab= "Frequency")
p5<-hist(x$REM.sleep.percentage, main="" , xlab = "REM Sleep Percentage [%]", ylab= "Frequency")
p6<-hist(x$Deep.sleep.percentage, main="" , xlab = "Deep Sleep Percentage [%]", ylab= "Frequency")
par(mfrow = c(1,1))
p7<-barplot(table(x$Awakenings), main="" , xlab = "Awakenings", ylab= "Frequency")
p4<-hist(x$Sleep.efficiency, main="" , xlab = "Sleep Efficiency", ylab= "Frequency")
par(mfrow = c(1,2))
p7<-barplot(table(x$Awakenings), main="" , xlab = "Awakenings", ylab= "Frequency")
p4<-hist(x$Sleep.efficiency, main="" , xlab = "Sleep Efficiency", ylab= "Frequency")
?stepAIC
test_fix <- sample(nrow(x), floor(nrow(x) * 0.25), replace = TRUE)
x <- x[-test_fix,]
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
stepwise_significativi_poiss <- names(contatore_vect_POISS[contatore_vect_POISS > n/2])
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
n = 2000
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_POISS,R = 10, parallel = "multicore")
stepwise_significativi_poiss <- names(contatore_vect_POISS[contatore_vect_POISS > n/2])
stepwise_significativi_poiss <- stepwise_significativi_poiss[-1]
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
summary(stepwise_final_model_poiss)
stepwise_significativi_poiss <- names(contatore_vect_POISS[contatore_vect_POISS > n/2])
stepwise_significativi_poiss <- stepwise_significativi_poiss[-1]
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_POISS,R = 10, parallel = "multicore")
stepwise_significativi_poiss <- names(contatore_vect_POISS[contatore_vect_POISS > n/2])
n = 10
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
stepwise_significativi_poiss <- names(contatore_vect_POISS[contatore_vect_POISS > n/2])
stepwise_significativi_poiss <- stepwise_significativi_poiss[-1]
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
summary(stepwise_final_model_poiss)
stepwise_final_model_poiss$coefficients
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
return(pois_mdl$coefficients)
}
n = 10
# Use boot() function to perform bootstrap simulations
coefficients_sw_poiss <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
coefficients_sw_poiss[["t"]]
coefficients_sw_poiss[["t"]][1]
coefficients_sw_poiss[["t"]][,1]
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
return(pois_mdl$coefficients)
}
n = 1000
# Use boot() function to perform bootstrap simulations
coefficients_sw_poiss <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(nrow(x[-train,]))
IC_down_predictions_poiss <- numeric(nrow(x[-train,]))
medie_coeff_poiss <- numeric(length(IC_up_predictions))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
isDentro <- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(res_predizioni[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
isDentro <- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
isSignificativo_poiss<- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(nrow(x[-train,]))
IC_down_predictions_poiss <- numeric(nrow(x[-train,]))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
isSignificativo_poiss<- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x)
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric()
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric((ncol(x))
isSignificativo_poiss<- numeric(ncol(coefficients_sw_poiss[["t"]]))
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric(ncol(x))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
isSignificativo_poiss<- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
View(tabella_pred)
n = 10
# Use boot() function to perform bootstrap simulations
coefficients_sw_poiss <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric(ncol(x))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
print(pois_mdl$coefficients)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
return(pois_mdl$coefficients)
}
n = 10
# Use boot() function to perform bootstrap simulations
coefficients_sw_poiss <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
View(x)
ncol(coefficients_sw_poiss[["t"]])
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
View(tabella_pred)
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x)+1)
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric(ncol(x))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
isSignificativo_poiss<- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
View(tabella_pred)
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
# print(pois_mdl$coefficients)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
return(pois_mdl$coefficients)
}
n = 1000
# Use boot() function to perform bootstrap simulations
coefficients_sw_poiss <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric(ncol(x))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
isSignificativo_poiss<- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
View(tabella_pred)
stepwise_significativi_poiss <- names(isSignificativo_poiss[isSignificativo_poiss == 1])
col_name <- c("(Intercept)",colnames(x))
medie_coeff_poiss <- setNames(numeric(length(col_name)), col_name)
colnames(x)
coefficients_sw_poiss[["t"]]
names(coefficients_sw_poiss[["t"]])
coefficients_sw_poiss$data
colnames(coefficients_sw_poiss$data))
colnames(coefficients_sw_poiss$data)
coefficients_sw_poiss[["t0"]]
names(coefficients_sw_poiss[["t0"]])
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric(ncol(x))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
col_name <- colnames(coefficients_sw_poiss[["t0"]])
col_name <- colnames(coefficients_sw_poiss[["t0"]])
colnames(coefficients_sw_poiss[["t0"]])
col_name <- names(coefficients_sw_poiss[["t0"]])
medie_coeff_poiss <- setNames(numeric(length(col_name)), col_name)
isSignificativo_poiss<- numeric(ncol(coefficients_sw_poiss[["t"]]))
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
stepwise_significativi_poiss <- names(isSignificativo_poiss[isSignificativo_poiss == 1])
View(tabella_pred)
coefficients_sw_poiss[["t0"]]
?boot
stepwise_significativi_poiss <- names(isSignificativo_poiss[isSignificativo_poiss == 1])
stepwise_significativi_poiss <- stepwise_significativi_poiss[-1]
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
names(isSignificativo_poiss[isSignificativo_poiss == 1])
isSignificativo_poiss[isSignificativo_poiss == 1]
# Converte la matrice o il data frame in un vettore
isSignificativo_poiss_vector <- as.vector(isSignificativo_poiss)
# Salva i nomi degli elementi con valore uguale a 1 in un vettore
stepwise_significativi_poiss <- names(which(isSignificativo_poiss_vector == 1))
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
isSignificativo_poiss<- setNames(numeric(length(col_name)), col_name)
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
stepwise_significativi_poiss <- names(isSignificativo_poiss[isSignificativo_poiss == 1])
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
stepwise_significativi_poiss
