#creazione vettore per intervalli di confidenza
IC <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
k=2
for (k in 1:ncol(res[["t"]])){
up = quantile(res[["t"]][,k-1], 0.975)
down = quantile(res[["t"]][,k-1], 0.025)
IC[k] <- c(up, down)
}
up = quantile(res[["t"]][,k-1], 0.975)
down = quantile(res[["t"]][,k-1], 0.025)
c(up, down)
c(quantile(res[["t"]][,k-1], 0.975),quantile(res[["t"]][,k-1], 0.025))
res[["t"]][,k-1]
k=2
quantile(res[["t"]][,k-1], 0.975)
#creazione vettore per intervalli di confidenza
IC <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
k=2
for (k in 1:ncol(res[["t"]])){
IC[k] <- c(quantile(res[["t"]][,k-1], 0.975),quantile(res[["t"]][,k-1], 0.025))
}
#creazione vettore per intervalli di confidenza
IC <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC
IC[k]
k
k-1
k
k=2
for (k in 1:ncol(res[["t"]])){
IC[k] <- c(quantile(res[["t"]][,k-1], 0.975),quantile(res[["t"]][,k-1], 0.025))
}
k
for (k in 1:ncol(res[["t"]])){
IC[k] <- c(quantile(res[["t"]][,k-1], 0.975),quantile(res[["t"]][,k-1], 0.025))
}
k
for (k in 2:ncol(res[["t"]])){
IC[k] <- c(quantile(res[["t"]][,k-1], 0.975),quantile(res[["t"]][,k-1], 0.025))
}
quantile(res[["t"]][,k-1], 0.975)
c(quantile(res[["t"]][,k-1], 0.975),quantile(res[["t"]][,k-1], 0.025))
IC <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC
for (k in 2:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k-1], 0.975)
IC_down[k] <- quantile(res[["t"]][,k-1], 0.025)
}
#creazione vettore per intervalli di confidenza
IC_up <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC_down <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
for (k in 2:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k-1], 0.975)
IC_down[k] <- quantile(res[["t"]][,k-1], 0.025)
}
IC_up[1]
IC_up[1] <- MSE_stepwise_final <- res[["t"]][,1]
res[["t"]][,1]
res[["t"]][,0]
for (k in 1:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k-1], 0.975)
IC_down[k] <- quantile(res[["t"]][,k-1], 0.025)
}
#LASSO REGRESSION
X <- model.matrix(Sleep.efficiency ~ . , data = x)
#creazione vettore per intervalli di confidenza
IC_up <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC_down <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
for (k in 1:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k-1], 0.975)
IC_down[k] <- quantile(res[["t"]][,k-1], 0.025)
}
IC_up
IC_down
#creazione vettore per intervalli di confidenza
IC_up <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC_down <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
for (k in 1:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k-1], 0.975)
IC_down[k] <- quantile(res[["t"]][,k-1], 0.025)
}
IC_down
IC_up
#creazione vettore per intervalli di confidenza
IC_up <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC_down <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
for (k in 1:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k], 0.975)
IC_down[k] <- quantile(res[["t"]][,k], 0.025)
}
IC_up
IC_dwon
IC_down
isSignificativo <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
for (k in 1:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k], 0.975)
IC_down[k] <- quantile(res[["t"]][,k], 0.025)
isSignificativo[k] <- ifelse(IC_up[k]*IC_down[k]<=0,0,1)
}
isSignificativo
# STEPWISE
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_SW <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
mdl <- lm(Sleep.efficiency ~ . , data = x)
# Define bootstrap function
get_alpha_SW <- function(data,index){
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step.model$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_SW[i]) %in% coeff_stimati){
contatore_vect_SW[i] <<- contatore_vect_SW[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_SW,R = n, parallel = "multicore")
stepwise_significativi <- names(contatore_vect_SW[contatore_vect_SW > n/2])
stepwise_significativi <- stepwise_significativi[-1]
stepwise_final_model <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x)
summary(stepwise_final_model)
# Define bootstrap function
get_alpha <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = FALSE)
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x, subset = temp_train)
temp_fitt_value <- predict(temp_mdl, data[-temp_train,])
temp_test_MSE = mean((data$Sleep.efficiency[-temp_train] - temp_fitt_value)^2)
return (c(temp_test_MSE, temp_mdl$coefficients))
}
# Use boot() function to perform bootstrap simulations
res <- boot(x,get_alpha,R=n)
Coefficients_stepwise_final <- res[["t"]][,2]
MSE_stepwise_final <- res[["t"]][,1]
#creazione vettore per intervalli di confidenza
IC_up <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC_down <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
isSignificativo <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
for (k in 1:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k], 0.975)
IC_down[k] <- quantile(res[["t"]][,k], 0.025)
isSignificativo[k] <- ifelse(IC_up[k]*IC_down[k]<=0,0,1)
}
isSignificativo
contatore_vect_SW
# Define bootstrap function
get_alpha_SW <- function(data,index){
temp_train <- sample(nrow(data), data, replace = TRUE)
mdl <- lm(Sleep.efficiency ~ . , data = x[temp_train,])
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step.model$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_SW[i]) %in% coeff_stimati){
contatore_vect_SW[i] <<- contatore_vect_SW[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_SW,R = n, parallel = "multicore")
# Define bootstrap function
get_alpha_SW <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
mdl <- lm(Sleep.efficiency ~ . , data = x[temp_train,])
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step.model$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_SW[i]) %in% coeff_stimati){
contatore_vect_SW[i] <<- contatore_vect_SW[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_SW,R = n, parallel = "multicore")
# Define bootstrap function
get_alpha_SW <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data)), replace = TRUE)
mdl <- lm(Sleep.efficiency ~ . , data = x[temp_train,])
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step.model$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_SW[i]) %in% coeff_stimati){
contatore_vect_SW[i] <<- contatore_vect_SW[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_SW,R = n, parallel = "multicore")
# Define bootstrap function
get_alpha_SW <- function(data,index){
temp_train <- sample(nrow(data), replace = TRUE)
mdl <- lm(Sleep.efficiency ~ . , data = x[temp_train,])
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step.model$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_SW[i]) %in% coeff_stimati){
contatore_vect_SW[i] <<- contatore_vect_SW[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_SW,R = n, parallel = "multicore")
nrow(data)
nrow(x)
# STEPWISE
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_SW <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_SW <- function(data,index){
temp_train <- sample(index, nrow(x), replace = TRUE)
mdl <- lm(Sleep.efficiency ~ . , data = x[temp_train,])
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step.model$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_SW[i]) %in% coeff_stimati){
contatore_vect_SW[i] <<- contatore_vect_SW[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_SW,R = n, parallel = "multicore")
stepwise_significativi <- names(contatore_vect_SW[contatore_vect_SW > n/2])
stepwise_significativi <- stepwise_significativi[-1]
stepwise_final_model <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x)
summary(stepwise_final_model)
# Define bootstrap function
get_alpha <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = FALSE)
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x, subset = temp_train)
temp_fitt_value <- predict(temp_mdl, data[-temp_train,])
temp_test_MSE = mean((data$Sleep.efficiency[-temp_train] - temp_fitt_value)^2)
return (c(temp_test_MSE, temp_mdl$coefficients))
}
# Use boot() function to perform bootstrap simulations
res <- boot(x,get_alpha,R=n)
Coefficients_stepwise_final <- res[["t"]][,2]
MSE_stepwise_final <- res[["t"]][,1]
#creazione vettore per intervalli di confidenza
IC_up <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC_down <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
isSignificativo <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
for (k in 1:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k], 0.975)
IC_down[k] <- quantile(res[["t"]][,k], 0.025)
isSignificativo[k] <- ifelse(IC_up[k]*IC_down[k]<=0,0,1)
}
isSignificativo
stepwise_significativi
View(res)
contatore_vect_SW
# STEPWISE
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_SW <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_SW <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = FALSE)
mdl <- lm(Sleep.efficiency ~ . , data = x[temp_train,])
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step.model$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_SW[i]) %in% coeff_stimati){
contatore_vect_SW[i] <<- contatore_vect_SW[i] + 1
}
}
}
# Use boot() function to perform bootstrap simulations
res_sw <- boot(x,get_alpha_SW,R = n, parallel = "multicore")
stepwise_significativi <- names(contatore_vect_SW[contatore_vect_SW > n/2])
stepwise_significativi <- stepwise_significativi[-1]
stepwise_final_model <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x)
summary(stepwise_final_model)
# Define bootstrap function
get_alpha <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = FALSE)
temp_mdl <- lm(reformulate(stepwise_significativi, "Sleep.efficiency"), data=x, subset = temp_train)
temp_fitt_value <- predict(temp_mdl, data[-temp_train,])
temp_test_MSE = mean((data$Sleep.efficiency[-temp_train] - temp_fitt_value)^2)
return (c(temp_test_MSE, temp_mdl$coefficients))
}
# Use boot() function to perform bootstrap simulations
res <- boot(x,get_alpha,R=n)
Coefficients_stepwise_final <- res[["t"]][,2]
MSE_stepwise_final <- res[["t"]][,1]
#creazione vettore per intervalli di confidenza
IC_up <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
IC_down <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
isSignificativo <- setNames(numeric(length(stepwise_significativi)+2), c("MSE", "Intercept", stepwise_significativi))
for (k in 1:ncol(res[["t"]])){
IC_up[k] <- quantile(res[["t"]][,k], 0.975)
IC_down[k] <- quantile(res[["t"]][,k], 0.025)
isSignificativo[k] <- ifelse(IC_up[k]*IC_down[k]<=0,0,1)
}
isSignificativo
contatore_vect_SW
stepwise_significativi
#Bootstrap su boosting
get_alpha_boost <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
temp_boost_model <- gbm(Sleep.efficiency ~ . , data = x[temp_train, ], distribution = "gaussian" ,
n.trees = 1500, interaction.depth = 4, shrinkage = 0.01 , verbose = F)
temp_fitt_value <- predict( temp_boost_model, newdata = data[-temp_train,], n.trees = 1500)
temp_test_MSE = mean((data$Sleep.efficiency[-temp_train] - temp_fitt_value)^2)
return (temp_test_MSE)
}
res_boost <- boot(x,get_alpha_boost,R=n, parallel = "multicore") #attenzione 'x' minuscola in questo caso
MSE_boost <- res_boost[["t"]]
MSE_boost
mean(MSE_boost)
IC_MSE_boost = c(quantile(MSE_boost, 0.975), quantile(MSE_boost, 0.025))
IC_MSE_boost
#BAGGING
bagg_model <- randomForest(Sleep.efficiency ~ . ,data = x, subset = train, mtry = ncol(x)-1, importance = TRUE, replace = TRUE, ntree = 2000)
plot(bagg_model)
bagg_fit <- predict(bagg_model, newdata = x[-train,])
plot(bagg_fit, x$Sleep.efficiency[-train])
abline(0,1)
MSE_bagg = mean((x$Sleep.efficiency[-train] - bagg_fit)^2)
bagg_fit
View(res)
View(mdl)
bagg_fit
cv.randomForest
cv_ridge <- cv.glmnet(X, Y, alpha = 0, nfolds = 10, lambda = NULL);
ridge_opt_lambda = cv_ridge$lambda.min;
get_alpha_ridge <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
glm_model_ridge = glmnet(data[temp_train,], Y[temp_train],alpha = 0, lambda = ridge_opt_lambda)
temp_fitt_value <- predict(glm_model_ridge, s = ridge_opt_lambda, newx = data[-temp_train,])
ridge_test_MSE = mean((Y[-temp_train] - temp_fitt_value)^2)
return  (ridge_test_MSE)
}
# Use boot() function to perform bootstrap simulations
res_ridge <- boot(X,get_alpha_ridge,R=n, parallel = "multicore")
MSE_ridge <- res_lasso[["t"]][,2]
lamda_ridge <- res_lasso[["t"]][,1]
cv_ridge <- cv.glmnet(X, Y, alpha = 0, nfolds = 10, lambda = NULL);
ridge_opt_lambda = cv_ridge$lambda.min;
get_alpha_ridge <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
glm_model_ridge = glmnet(data[temp_train,], Y[temp_train],alpha = 0, lambda = ridge_opt_lambda)
temp_fitt_value <- predict(glm_model_ridge, s = ridge_opt_lambda, newx = data[-temp_train,])
ridge_test_MSE = mean((Y[-temp_train] - temp_fitt_value)^2)
return  (ridge_test_MSE)
}
# Use boot() function to perform bootstrap simulations
res_ridge <- boot(X,get_alpha_ridge,R=n, parallel = "multicore")
MSE_ridge <- res_lasso[["t"]][,1]
MSE_ridge
mean(MSE_ridge)
# Use boot() function to perform bootstrap simulations
res_ridge <- boot(X,get_alpha_ridge,R=1000, parallel = "multicore")
MSE_ridge <- res_lasso[["t"]][,1]
#BAGGING
bagg_model <- randomForest(Sleep.efficiency ~ . ,data = x, subset = train, mtry = ncol(x)-1, importance = TRUE, replace = TRUE, ntree = 2000)
MSE_ridge
mean(MSE_ridge)
dim
length(numeric(1:dim))
lenght(numeric(1:dim))
size(numeric(1:dim))
numeric(1:dim)
1:dim
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
# print(pois_mdl$coefficients)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
return(pois_mdl$coefficients)
}
n = 1000
# Use boot() function to perform bootstrap simulations
coefficients_sw_poiss <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
library(tidyverse)
library(caret)
library(leaps)
library("MASS")
library("glmnet")
library ( ISLR2 )
library ( boot )
library(tree)
library ( randomForest )
library ( gbm )
library(recipes)
library("tseries")
library(tseries)
library(xtable)
library(groupdata2)
library(tseries)
library(corrplot)
library(gridExtra)
library(ggplot2)
# clear all environment variable
rm(list = ls())
# Read Dataset from csv file
x = read.csv("Sleep_Efficiency.csv")
# creating dummy variable for gender and smoking status
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Smoking.status <- ifelse(x$Smoking.status==2,1,0)
x$Gender <- ifelse(x$Gender=="Male",1,0)
# removing useless column
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x <- x[,-7]
# omitting NA and creating x and y variables
x <- na.omit(x)
y <- x$Sleep.efficiency
# saving number of original columns
dim = ncol(x)
n = 2000
set.seed(42)
train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
#inizializzo il vettore per il conteggio
col_name <- c("(Intercept)",colnames(x))
contatore_vect_POISS <- setNames(numeric(length(col_name)), col_name)
dim = length(col_name)
# Define bootstrap function
get_alpha_POISS <- function(data,index){
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
pois_mdl <- glm(Awakenings ~ . , data = x[temp_train,] , family = poisson)
# print(pois_mdl$coefficients)
step_pois <- stepAIC(pois_mdl, direction = "both",
trace = FALSE)
#parte per conteggio delle comparse
coeff_stimati <- names(step_pois$coefficients)
i=0
for (i in 1:dim){
if(names(contatore_vect_POISS[i]) %in% coeff_stimati){
contatore_vect_POISS[i] <<- contatore_vect_POISS[i] + 1
}
}
return(pois_mdl$coefficients)
}
n = 1000
# Use boot() function to perform bootstrap simulations
coefficients_sw_poiss <- boot(x,get_alpha_POISS,R = n, parallel = "multicore")
temp_train <- sample(nrow(data), floor(nrow(data) * 0.75), replace = TRUE)
#calcolo degli intervalli di confidenza
IC_up_predictions_poiss <- numeric(ncol(x))
IC_down_predictions_poiss <- numeric(ncol(x))
medie_coeff_poiss <- numeric(length(IC_up_predictions_poiss))
col_name <- names(coefficients_sw_poiss[["t0"]])
medie_coeff_poiss <- setNames(numeric(length(col_name)), col_name)
isSignificativo_poiss<- setNames(numeric(length(col_name)), col_name)
for (k in 1:ncol(coefficients_sw_poiss[["t"]])){
IC_up_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.995)
IC_down_predictions_poiss[k] <- quantile(coefficients_sw_poiss[["t"]][,k], 0.005)
medie_coeff_poiss[k] <- mean(coefficients_sw_poiss[["t"]][,k])
isSignificativo_poiss[k] <- ifelse(IC_down_predictions_poiss[k]*IC_up_predictions_poiss[k] >=0, 1, 0)
}
tabella_pred <- data.frame(medie_coeff_poiss,  IC_down_predictions_poiss, IC_up_predictions_poiss, isSignificativo_poiss)
stepwise_significativi_poiss <- names(isSignificativo_poiss[isSignificativo_poiss == 1])
#stepwise_significativi_poiss <- stepwise_significativi_poiss[-1]
stepwise_significativi_poiss <- stepwise_significativi_poiss[-1]
stepwise_significativi_poiss
#reformulate ha problemi con l'intercetta
stepwise_final_model_poiss <- glm(reformulate(stepwise_significativi_poiss, "Awakenings"), data=x, family = 'poisson')
summary(stepwise_final_model_poiss)
pred <- predict(stepwise_final_model_poiss,type="response")
plot(x$Awakenings,pred)
pred
summary(stepwise_final_model_poiss)
confusionMatrix(stepwise_final_model_poiss)
D_res_poiss = sum((x$Awakenings - pre)^2)
D_tot_poiss = sum((x$Awakenings - mean(x$Awakenings))^2)
D_res_poiss = sum((x$Awakenings - pred)^2)
D_tot_poiss
D_res_poiss = sum((x$Awakenings - pred)^2)
D_tot_poiss
stepwise_significativi_poiss <- names(contatore_vect_POISS[contatore_vect_POISS > n/2])
D_res_poiss
1 - D_res_poiss/D_tot_poiss
mean(x$Awakenings)
