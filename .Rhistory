mydata <- mydata[,colSums(is.na(mydata))==0]
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,1:20];
mydata <- mydata[,colSums(is.na(mydata))==0]
drop(mydata$position)
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - name - club_abb -club - birth_city - birth_country - foot - position, data = mydata)
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - name - club_abb -club - birth_city - birth_country - foot - position, data = mydata)
summary(model)
mydata <- mydata[,1:5];
mydata <- mydata[,colSums(is.na(mydata))==0]
drop(mydata$position);
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - name - club_abb -club - birth_city - birth_country - foot - position, data = mydata)
summary(model)
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,1:20];
mydata <- mydata[,colSums(is.na(mydata))==0]
drop(mydata$position);
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - name - club_abb -club - birth_city - birth_country - foot - position, data = mydata)
summary(model)
View(mydata)
View(mydata)
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
drop(mydata$position);
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - name - club_abb -club - birth_city - birth_country - foot - position, data = mydata)
dataset = read.csv("dataset.csv")
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
drop(mydata$position);
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - name - club_abb -club - birth_city - birth_country - foot, data = mydata)
summary(model)
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,-6];
model = lm(X2021.guaranteed.comp. ~ . - name - club_abb -club - birth_city - birth_country - foot, data = mydata)
summary(model)
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - name - club_abb -club - birth_city - birth_country - foot, data = mydata)
summary(model)
dataset = read.csv("dataset.csv")
mydata <- subset(dataset, position == "Defender")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
drop(mydata$position);
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - name - club_abb -club - birth_city - birth_country - foot, data = mydata)
summary(model)
mydata <- subset(dataset, position == "Defender")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
drop(mydata$position);
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - X2022.guaranteed.comp. - name - club_abb -club - birth_city - birth_country - foot, data = mydata)
model = lm(X2021.guaranteed.comp. ~ . - X2022.guar.comp. - name - club_abb -club - birth_city - birth_country - foot, data = mydata)
model = lm(X2021.guaranteed.comp. ~ . - X2022.guar.comp. - name - club_abb -club - birth_city - birth_country - foot, data = mydata)
summary(model)
mydata <- subset(dataset, position == "Defender")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
drop(mydata$position);
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - X2022.guar..comp. - name - club_abb -club - birth_city - birth_country - foot, data = mydata)
summary(model)
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
drop(mydata$position);
labels = colnames(mydata);
model = lm(X2021.guaranteed.comp. ~ . - X2022.guar..comp. - name - club_abb -club - birth_city - birth_country - foot, data = mydata)
summary(model)
library(tidyverse)
library(caret)
library(leaps)
dataset = read.csv("dataset.csv")
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
labels = colnames(mydata);
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
# Fit the full model
full.model <- lm(Fertility ~., data = mydata)
# Fit the full model
full.model <- lm(X2021.guaranteed.comp. ~., data = mydata)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
library("MASS")
install.packages("MASS")
install.packages("MASS")
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
# Fit the full model
full.model <- lm(X2021.guaranteed.comp. ~., data = mydata)
summary(full.model)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
library("MASS")
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
View(mydata)
dataset = read.csv("dataset.csv")
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
labels = colnames(mydata);
# Fit the full model
full.model <- lm(X2021.guaranteed.comp. ~. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
# Fit the full model
full.model <- lm(X2021.guaranteed.comp. ~. -X2022.guar..comp. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
help("stepAIC")
glmnet(mydata[-4],mydata[4],alpha = 1, lambda = 10^seq(-2,3, length=50))
library(glmnet)
install.package("Matrix")
library("glmnet")
dataset = read.csv("dataset.csv")
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
labels = colnames(mydata);
# Fit the full model
full.model <- lm(X2021.guaranteed.comp. ~. -X2022.guar..comp. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
View(mydata)
l = 10^seq(-2,3, length=50);
glmnet(mydata[-4],mydata[4],alpha = 1, lambda = l)
cv_lasso <- cv.glmnet(mydata[-4],mydata[4], alpha = 1, nfolds = 10);
plot(cv_lasso)
cv_lasso <- cv.glmnet(mydata[-4],mydata[4], alpha = 1, nfolds = 10);
plot(cv_lasso)
set.seed(1);
glmnet(mydata[-4],mydata[4],alpha = 1, lambda = l)
cv_lasso <- cv.glmnet(mydata[-4],mydata[4], alpha = 1, nfolds = 10);
plot(cv_lasso)
mydata[-4]
model.matrix(mydata)
model.matrix()
x <- model.matrix(X2021.guaranteed.comp. ~ ., data = mydata)
y <- mydata$X2021.guaranteed.comp.
glmnet(mydata[-4],mydata[4],alpha = 1, lambda = l)
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10);
glmnet(x,y,alpha = 1, lambda = l)
x <- model.matrix(X2021.guaranteed.comp. ~ ., data = mydata)
y <- mydata$X2021.guaranteed.comp.
glmnet(x,y,alpha = 1, lambda = l)
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10);
plot(cv_lasso)
glmnet(x,y,alpha = 1, lambda = 1)
set.seed(1);
x <- model.matrix(X2021.guaranteed.comp. ~ ., data = mydata)
y <- mydata$X2021.guaranteed.comp.
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10);
plot(cv_lasso)
opt_lambda = cv_lasso$lambda.min;
glmnet(x,y,alpha = 1, lambda = opt_lambda)
glm_model = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model)
glm_model$beta
dataset = read.csv("dataset.csv")
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
labels = colnames(mydata);
# Fit the full model
full.model <- lm(X2021.guaranteed.comp. ~. -X2022.guar..comp. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
View(mydata)
l = 10^seq(-2,3, length=50);
set.seed(1);
x <- model.matrix(X2021.guaranteed.comp. ~ ., data = mydata)
y <- mydata$X2021.guaranteed.comp.
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10);
plot(cv_lasso)
opt_lambda = cv_lasso$lambda.min;
glm_model = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model)
glm_model$beta
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10, lambda = l);
plot(cv_lasso)
opt_lambda = cv_lasso$lambda.min;
glm_model = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model)
glm_model$beta
mydata <- mydata[,colSums(is.na(mydata))==0]
labels = colnames(mydata);
# Fit the full model
full.model <- lm(X2021.guaranteed.comp. ~. -X2022.guar..comp. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
View(mydata)
l = 10^seq(-2,3, length=50);
set.seed(1);
x <- model.matrix(X2021.guaranteed.comp. ~ .-X2022.guar..comp. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)
y <- mydata$X2021.guaranteed.comp.
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10, lambda = l);
plot(cv_lasso)
opt_lambda = cv_lasso$lambda.min;
glm_model = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model)
glm_model$beta
plot(cv_lasso)
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10, lambda = l);
plot(cv_lasso)
opt_lambda = cv_lasso$lambda.min;
glm_model = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model)
glm_model$beta
help("cv.glmnet")
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10, lambda = NULL);
plot(cv_lasso)
opt_lambda = cv_lasso$lambda.min;
glm_model = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model)
glm_model$beta
glm_model$dev.ratio
hekp(glm_model)
hekp(glmnet())
hekp(glmnet)
help(glmnet)
lm(X2021.guaranteed.comp. ~ failed_cross_nocorner + failed_launches + accurate_long_balls + failed_throws + inside_box_goal +left_foot_goal+fk_foul_won+total_scoring_att+outfielder_block+total_offside+aerial_duel)
lm(X2021.guaranteed.comp. ~ failed_cross_nocorner + failed_launches + accurate_long_balls + failed_throws + inside_box_goal +left_foot_goal+fk_foul_won+total_scoring_att+outfielder_block+total_offside+aerial_duel, data = mydata)
test = lm(X2021.guaranteed.comp. ~ failed_cross_nocorner + failed_launches + accurate_long_balls + failed_throws + inside_box_goal +left_foot_goal+fk_foul_won+total_scoring_att+outfielder_block+total_offside+aerial_duel, data = mydata)
summary(test)
glm_model_ridge = glmnet(x,y,alpha = 0, lambda = opt_lambda)
summary(glm_model_ridge)
glm_model_ridge$beta
mdl_ridge = lm(X2021.guaranteed.comp. ~ failed_cross_nocorner + failed_launches + accurate_long_balls + failed_throws + inside_box_goal +left_foot_goal+fk_foul_won+total_scoring_att+outfielder_block+total_offside+aerial_duel, data = mydata)
summary(mdl_ridge) # lasso fa cagare
glm_model_ridge = glmnet(x,y,alpha = 0, lambda = opt_lambda)
summary(glm_model_ridge)
glm_model_ridge$beta
glm_model_ridge$df
glm_model_ridge$dim
mdl_lasso = predict(model = glm_model_lasso, s = opt_lambda, newx = x)
glm_model_lasso = glmnet(x,y,alpha = 1, lambda = opt_lambda)x
summary(glm_model_lasso)
glm_model_lasso$beta
mdl_lasso = predict(model = glm_model_lasso, s = opt_lambda, newx = x)
opt_lambda = cv_lasso$lambda.min;x
opt_lambda = cv_lasso$lambda.min;
glm_model_lasso = glmnet(x,y,alpha = 1, lambda = opt_lambda)x
glm_model_lasso = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model_lasso)
glm_model_lasso$beta
mdl_lasso = predict(model = glm_model_lasso, s = opt_lambda, newx = x)
x <- model.matrix(X2021.guaranteed.comp. ~ .-X2022.guar..comp. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)
y <- mydata$X2021.guaranteed.comp.
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10, lambda = NULL);
plot(cv_lasso)
opt_lambda = cv_lasso$lambda.min;
glm_model_lasso = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model_lasso)
glm_model_lasso$beta
mdl_lasso = predict(model = glm_model_lasso, s = opt_lambda, newx = x)
fit_value = predict(model = glm_model_lasso, s = opt_lambda, newx = x)
fitt_value <- predict(model = glm_model_lasso, s = opt_lambda, newx = x)
x <- model.matrix(X2021.guaranteed.comp. ~ .-X2022.guar..comp. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)[ , -1]
y <- mydata$X2021.guaranteed.comp.
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10, lambda = NULL);
plot(cv_lasso)
opt_lambda = cv_lasso$lambda.min;
glm_model_lasso = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model_lasso)
glm_model_lasso$beta
fitt_value <- predict(model = glm_model_lasso, s = opt_lambda, newx = x)
help("predict")
fitt_value <- predict(model = glm_model_lasso, s = opt_lambda)
glm_model_ridge = glmnet(x,y,alpha = 0, lambda = opt_lambda, newx = x)
summary(glm_model_ridge)
glm_model_ridge$beta
fitt_value <- predict(model = glm_model_lasso, s = opt_lambda, newx = x)
glm_model_lasso = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model_lasso)
glm_model_lasso$beta
fitt_value <- predict(model = glm_model_lasso, s = opt_lambda, newx = x)
glm_model_ridge = glmnet(x,y,alpha = 0, lambda = opt_lambda, newx = x)
summary(glm_model_ridge)
glm_model_ridge$beta
glm_model_ridge$
mdl_ridge = predict(model=glm_model_ridge, )
glm_model_ridge$
mdl_ridge = predict(model=glm_model_ridge, s = opt_lambda, newx = x)
dataset = read.csv("dataset.csv")
mydata <- subset(dataset, position == "Forward")
library(tidyverse)
library(caret)
library(leaps)
library("MASS")
library("glmnet")
dataset = read.csv("dataset.csv")
mydata <- subset(dataset, position == "Forward")
mydata <- mydata[,-6];
mydata <- mydata[,colSums(is.na(mydata))==0]
labels = colnames(mydata);
# Fit the full model
full.model <- lm(X2021.guaranteed.comp. ~. -X2022.guar..comp. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
l = 10^seq(-2,3, length=50);
set.seed(1);
x <- model.matrix(X2021.guaranteed.comp. ~ .-X2022.guar..comp. -name -club_abb -club -birth_city -birth_country -foot, data = mydata)[ , -1]
y <- mydata$X2021.guaranteed.comp.
cv_lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 10, lambda = NULL);
plot(cv_lasso)
opt_lambda = cv_lasso$lambda.min;
glm_model_lasso = glmnet(x,y,alpha = 1, lambda = opt_lambda)
summary(glm_model_lasso)
glm_model_lasso$beta
fitt_value <- predict(model = glm_model_lasso, s = opt_lambda, newx = x)
library(tidyverse)
library(caret)
library(leaps)
library("MASS")
library("glmnet")
library ( ISLR2 )
library ( boot )
rm(list = ls()) # clear all environment variable
# PREPROCESSING
x = read.csv("/Users/anselminicolas/Desktop/Uni/Quarto anno/Statistical Learning/Progetto/Sleep_Efficiency.csv")
# PREPROCESSING
x = read.csv("Sleep_Efficiency.csv")
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Gender <- ifelse(x$Gender=="Male",1,0)
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
sum(is.na(x))
x <- na.omit(x)
y <- x$Sleep.efficiency
View(x)
View(x)
x <- na.omit(x)
y <- x$Sleep.efficiency
# LINEAR REGRESSION
set.seed(42)
#train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = FALSE)
mdl <- lm(Sleep.efficiency ~ . , data = x[train,])
summary(mdl)
fitt_value <- predict(mdl,newx = x[-train,])
test_MSE = mean((y[-train] - fitt_value)^2)
test_MSE
# STEPWISE
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
summary(step.model)
fitt_value <- predict(step.model,newx = x[-train,])
step_test_MSE = mean((y[-train] - fitt_value)^2)
step_test_MSE
# LASSO REGRESSION
l = 10^seq(-2,3, length=50);
set.seed(42);
X <- model.matrix(Sleep.efficiency ~ . , data = x)
Y <- y
cv_lasso <- cv.glmnet(X[train,],Y[train], alpha = 1, nfolds = 10, lambda = NULL);
plot(cv_lasso)
lasso_opt_lambda = cv_lasso$lambda.min;
lasso_opt_lambda
glm_model_lasso = glmnet(X[train,],Y[train],alpha = 1, lambda = lasso_opt_lambda)
summary(glm_model_lasso)
glm_model_lasso$beta
lasso_fit <- predict(glm_model_lasso,s = lasso_opt_lambda, newx = X[-train,])
lasso_test_MSE = mean((y[-train] - lasso_fit)^2)
lasso_test_MSE
glm_model_lasso$beta
sumary(glm_model_lasso$beta)
summary(glm_model_lasso$beta)
summary(glm_model_lasso)
glm_model_lasso$beta
# RIDGE REGRESSION
cv_ridge <- cv.glmnet(X[train,],Y[train], alpha = 0, nfolds = 10, lambda = NULL);
plot(cv_ridge)
ridge_opt_lambda = cv_ridge$lambda.min;
ridge_opt_lambda
glm_model_ridge = glmnet(X[train,],Y[train],alpha = 0, lambda = ridge_opt_lambda)
summary(glm_model_ridge)
glm_model_ridge$beta
ridge_fit <- predict(glm_model_ridge,s = ridge_opt_lambda ,newx = X[-train,])
ridge_test_MSE = mean((y[-train] - ridge_fit)^2)
ridge_test_MSE
x = read.csv("Sleep_Efficiency.csv")
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Gender <- ifelse(x$Gender=="Male",1,0)
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
x$REM.sleep.percentage <- x$Sleep.duration * x$REM.sleep.percentage/100
x$Deep.sleep.percentage <- x$Deep.sleep.percentage/100 * x$Sleep.duration
x$Light.sleep.percentage <- x$Light.sleep.percentage/100 * x$Sleep.duration
summary(glm_model_lasso)
glm_model_lasso$beta
y <- log(x$Sleep.efficiency)
# LINEAR REGRESSION
set.seed(42)
#train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = FALSE)
mdl <- lm(Sleep.efficiency ~ . , data = x[train,])
summary(mdl)
fitt_value <- predict(mdl,newx = x[-train,])
test_MSE = mean((y[-train] - fitt_value)^2)
rm(list = ls()) # clear all environment variable
# PREPROCESSING
x = read.csv("Sleep_Efficiency.csv")
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Gender <- ifelse(x$Gender=="Male",1,0)
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
sum(is.na(x))
x <- na.omit(x)
y <- log(x$Sleep.efficiency)
# LINEAR REGRESSION
set.seed(42)
#train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = FALSE)
mdl <- lm(y ~ . , data = x[train,])
sum(is.na(x))
x <- na.omit(x)
y <- x$Sleep.efficiency
# LINEAR REGRESSION
set.seed(42)
#train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = FALSE)
mdl <- lm(log(Sleep.efficiency) ~ . , data = x[train,])
summary(mdl)
summary(mdl)
fitt_value <- predict(mdl,newx = x[-train,])
test_MSE = mean((y[-train] - fitt_value)^2)
test_MSE
# STEPWISE
step.model <- stepAIC(mdl, direction = "both",
trace = FALSE)
summary(step.model)
fitt_value <- predict(step.model,newx = x[-train,])
step_test_MSE = mean((y[-train] - fitt_value)^2)
step_test_MSE
# LASSO REGRESSION
l = 10^seq(-2,3, length=50);
set.seed(42);
X <- model.matrix(Sleep.efficiency ~ . , data = x)
Y <- y
cv_lasso <- cv.glmnet(X[train,],Y[train], alpha = 1, nfolds = 10, lambda = NULL);
plot(cv_lasso)
lasso_opt_lambda = cv_lasso$lambda.min;
lasso_opt_lambda
glm_model_lasso = glmnet(X[train,],Y[train],alpha = 1, lambda = lasso_opt_lambda)
summary(glm_model_lasso)
glm_model_lasso$beta
y <- log(x$Sleep.efficiency)
# LINEAR REGRESSION
set.seed(42)
#train <- sample(dim(x)[1],floor(dim(x)[1]*0.75),replace = FALSE);
train <- sample(nrow(x), floor(nrow(x) * 0.75), replace = FALSE)
mdl <- lm(y ~ . , data = x[train,])
rm(list = ls()) # clear all environment variable
# PREPROCESSING
x = read.csv("Sleep_Efficiency.csv")
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Gender <- ifelse(x$Gender=="Male",1,0)
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
sum(is.na(x))
x <- na.omit(x)
x$Sleep.efficiency<-log(x$Sleep.efficiency)
y <- log(x$Sleep.efficiency)
View(x)
View(x)
# PREPROCESSING
x = read.csv("Sleep_Efficiency.csv")
x$Smoking.status <- as.numeric(as.factor(x$Smoking.status))
x$Gender <- ifelse(x$Gender=="Male",1,0)
x <- x[,-1]
x <- x[,-3]
x <- x[,-3]
sum(is.na(x))
x <- na.omit(x)
count(x$Sleep.efficiency==0)
colSums(x$Sleep.efficiency)
sum(x$Sleep.efficiency==0)
